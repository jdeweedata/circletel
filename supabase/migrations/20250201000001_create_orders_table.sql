-- =====================================================
-- Migration: Create Orders Table for Payment Integration
-- Epic: CFC-001 Coverage & Feasibility Check System
-- Story: CFC-001-01 Payment Integration
-- =====================================================

-- Create orders table
CREATE TABLE IF NOT EXISTS public.orders (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),

  -- Relationships
  lead_id UUID NOT NULL REFERENCES public.coverage_leads(id) ON DELETE CASCADE,
  package_id UUID NOT NULL REFERENCES public.service_packages(id) ON DELETE RESTRICT,

  -- Customer Information
  customer_name VARCHAR(255) NOT NULL,
  customer_email VARCHAR(255) NOT NULL,
  customer_phone VARCHAR(50) NOT NULL,
  installation_address TEXT NOT NULL,

  -- Order Details
  service_type VARCHAR(100) NOT NULL,
  speed_down INTEGER NOT NULL,
  speed_up INTEGER NOT NULL,

  -- Pricing
  base_price DECIMAL(10, 2) NOT NULL,
  promotional_price DECIMAL(10, 2),
  promotional_months INTEGER,
  installation_fee DECIMAL(10, 2) DEFAULT 0.00,
  total_amount DECIMAL(10, 2) NOT NULL,

  -- Payment Information
  payment_status VARCHAR(50) NOT NULL DEFAULT 'pending',
  payment_method VARCHAR(50) DEFAULT 'netcash',
  payment_reference VARCHAR(255),
  netcash_transaction_id VARCHAR(255),
  payment_date TIMESTAMPTZ,

  -- Order Status
  order_status VARCHAR(50) NOT NULL DEFAULT 'pending_payment',
  crm_synced BOOLEAN DEFAULT FALSE,
  crm_lead_id VARCHAR(255),
  crm_synced_at TIMESTAMPTZ,

  -- Special Instructions
  customer_notes TEXT,
  internal_notes TEXT,

  -- Metadata
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),

  -- Constraints
  CONSTRAINT valid_payment_status CHECK (
    payment_status IN ('pending', 'processing', 'completed', 'failed', 'refunded', 'cancelled')
  ),
  CONSTRAINT valid_order_status CHECK (
    order_status IN ('pending_payment', 'payment_received', 'crm_processing', 'confirmed', 'cancelled', 'failed')
  ),
  CONSTRAINT valid_email CHECK (customer_email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'),
  CONSTRAINT positive_amounts CHECK (
    base_price > 0 AND
    total_amount > 0 AND
    installation_fee >= 0 AND
    (promotional_price IS NULL OR promotional_price > 0)
  )
);

-- Create indexes for performance
CREATE INDEX idx_orders_lead_id ON public.orders(lead_id);
CREATE INDEX idx_orders_package_id ON public.orders(package_id);
CREATE INDEX idx_orders_customer_email ON public.orders(customer_email);
CREATE INDEX idx_orders_payment_status ON public.orders(payment_status);
CREATE INDEX idx_orders_order_status ON public.orders(order_status);
CREATE INDEX idx_orders_payment_reference ON public.orders(payment_reference);
CREATE INDEX idx_orders_netcash_transaction_id ON public.orders(netcash_transaction_id);
CREATE INDEX idx_orders_created_at ON public.orders(created_at DESC);
CREATE INDEX idx_orders_crm_synced ON public.orders(crm_synced) WHERE crm_synced = FALSE;

-- Create updated_at trigger
CREATE OR REPLACE FUNCTION update_orders_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_orders_timestamp
  BEFORE UPDATE ON public.orders
  FOR EACH ROW
  EXECUTE FUNCTION update_orders_updated_at();

-- Enable Row Level Security (RLS)
ALTER TABLE public.orders ENABLE ROW LEVEL SECURITY;

-- RLS Policies

-- Policy: Service role has full access (for API routes)
CREATE POLICY "Service role has full access to orders"
  ON public.orders
  FOR ALL
  TO service_role
  USING (true)
  WITH CHECK (true);

-- Policy: Authenticated users can read their own orders (by email)
CREATE POLICY "Users can read their own orders"
  ON public.orders
  FOR SELECT
  TO authenticated
  USING (auth.jwt() ->> 'email' = customer_email);

-- Policy: Anonymous users can create orders (for checkout flow)
CREATE POLICY "Allow order creation for checkout"
  ON public.orders
  FOR INSERT
  TO anon
  WITH CHECK (true);

-- Add comments for documentation
COMMENT ON TABLE public.orders IS 'Stores customer orders with payment and CRM integration tracking';
COMMENT ON COLUMN public.orders.lead_id IS 'Reference to the coverage check lead that initiated this order';
COMMENT ON COLUMN public.orders.package_id IS 'Reference to the selected service package';
COMMENT ON COLUMN public.orders.payment_status IS 'Current payment status: pending, processing, completed, failed, refunded, cancelled';
COMMENT ON COLUMN public.orders.order_status IS 'Order processing status: pending_payment, payment_received, crm_processing, confirmed, cancelled, failed';
COMMENT ON COLUMN public.orders.payment_reference IS 'Unique payment reference for tracking (generated by app)';
COMMENT ON COLUMN public.orders.netcash_transaction_id IS 'Netcash transaction ID from payment gateway';
COMMENT ON COLUMN public.orders.crm_synced IS 'Whether order has been synced to CRM (Zoho)';
COMMENT ON COLUMN public.orders.crm_lead_id IS 'Lead ID in the CRM system after sync';

-- Create payment audit log table
CREATE TABLE IF NOT EXISTS public.payment_audit_logs (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  order_id UUID NOT NULL REFERENCES public.orders(id) ON DELETE CASCADE,

  -- Event Details
  event_type VARCHAR(50) NOT NULL,
  status VARCHAR(50) NOT NULL,

  -- Webhook Data
  netcash_response JSONB,
  request_headers JSONB,
  request_body TEXT,

  -- Verification
  signature_valid BOOLEAN,
  ip_address VARCHAR(45),

  -- Metadata
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),

  CONSTRAINT valid_event_type CHECK (
    event_type IN ('payment_initiated', 'payment_callback', 'payment_verified', 'payment_failed', 'webhook_received')
  )
);

-- Index for audit logs
CREATE INDEX idx_payment_audit_order_id ON public.payment_audit_logs(order_id);
CREATE INDEX idx_payment_audit_created_at ON public.payment_audit_logs(created_at DESC);
CREATE INDEX idx_payment_audit_event_type ON public.payment_audit_logs(event_type);

-- Enable RLS for audit logs
ALTER TABLE public.payment_audit_logs ENABLE ROW LEVEL SECURITY;

-- RLS Policy: Service role only
CREATE POLICY "Service role has full access to payment audit logs"
  ON public.payment_audit_logs
  FOR ALL
  TO service_role
  USING (true)
  WITH CHECK (true);

COMMENT ON TABLE public.payment_audit_logs IS 'Audit trail for all payment-related events and webhook callbacks';

-- Grant permissions
GRANT SELECT, INSERT, UPDATE ON public.orders TO anon;
GRANT SELECT, INSERT, UPDATE ON public.orders TO authenticated;
GRANT ALL ON public.orders TO service_role;

GRANT INSERT ON public.payment_audit_logs TO anon;
GRANT INSERT ON public.payment_audit_logs TO authenticated;
GRANT ALL ON public.payment_audit_logs TO service_role;
