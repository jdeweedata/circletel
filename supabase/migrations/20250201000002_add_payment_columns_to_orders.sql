-- =====================================================
-- Migration: Add Payment Columns to Existing Orders Table
-- Epic: CFC-001 Coverage & Feasibility Check System
-- Story: CFC-001-01 Payment Integration
-- =====================================================

-- Add payment-related columns to existing orders table
ALTER TABLE public.orders
  -- Customer Information (if not already present)
  ADD COLUMN IF NOT EXISTS customer_name VARCHAR(255),
  ADD COLUMN IF NOT EXISTS customer_email VARCHAR(255),
  ADD COLUMN IF NOT EXISTS customer_phone VARCHAR(50),

  -- Service Details (if not already present)
  ADD COLUMN IF NOT EXISTS service_type VARCHAR(100),
  ADD COLUMN IF NOT EXISTS speed_down INTEGER,
  ADD COLUMN IF NOT EXISTS speed_up INTEGER,

  -- Pricing Details
  ADD COLUMN IF NOT EXISTS base_price DECIMAL(10, 2),
  ADD COLUMN IF NOT EXISTS promotional_price DECIMAL(10, 2),
  ADD COLUMN IF NOT EXISTS promotional_months INTEGER,
  ADD COLUMN IF NOT EXISTS installation_fee DECIMAL(10, 2) DEFAULT 0.00,

  -- Payment Information
  ADD COLUMN IF NOT EXISTS payment_status VARCHAR(50) DEFAULT 'pending',
  ADD COLUMN IF NOT EXISTS payment_method VARCHAR(50) DEFAULT 'netcash',
  ADD COLUMN IF NOT EXISTS payment_reference VARCHAR(255),
  ADD COLUMN IF NOT EXISTS netcash_transaction_id VARCHAR(255),
  ADD COLUMN IF NOT EXISTS payment_date TIMESTAMPTZ,

  -- Order Status (enhanced)
  ADD COLUMN IF NOT EXISTS order_status VARCHAR(50) DEFAULT 'pending_payment',

  -- CRM Integration
  ADD COLUMN IF NOT EXISTS crm_synced BOOLEAN DEFAULT FALSE,
  ADD COLUMN IF NOT EXISTS crm_lead_id VARCHAR(255),
  ADD COLUMN IF NOT EXISTS crm_synced_at TIMESTAMPTZ,

  -- Additional Notes
  ADD COLUMN IF NOT EXISTS customer_notes TEXT,
  ADD COLUMN IF NOT EXISTS internal_notes TEXT;

-- Add constraints (only if they don't exist)
DO $$
BEGIN
  -- Check for payment_status constraint
  IF NOT EXISTS (
    SELECT 1 FROM pg_constraint
    WHERE conname = 'orders_valid_payment_status'
  ) THEN
    ALTER TABLE public.orders
    ADD CONSTRAINT orders_valid_payment_status CHECK (
      payment_status IN ('pending', 'processing', 'completed', 'failed', 'refunded', 'cancelled')
    );
  END IF;

  -- Check for order_status constraint
  IF NOT EXISTS (
    SELECT 1 FROM pg_constraint
    WHERE conname = 'orders_valid_order_status'
  ) THEN
    ALTER TABLE public.orders
    ADD CONSTRAINT orders_valid_order_status CHECK (
      order_status IN ('pending_payment', 'payment_received', 'crm_processing', 'confirmed', 'cancelled', 'failed')
    );
  END IF;

  -- Check for email validation constraint
  IF NOT EXISTS (
    SELECT 1 FROM pg_constraint
    WHERE conname = 'orders_valid_email'
  ) THEN
    ALTER TABLE public.orders
    ADD CONSTRAINT orders_valid_email CHECK (
      customer_email IS NULL OR
      customer_email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'
    );
  END IF;

  -- Check for positive amounts constraint
  IF NOT EXISTS (
    SELECT 1 FROM pg_constraint
    WHERE conname = 'orders_positive_amounts'
  ) THEN
    ALTER TABLE public.orders
    ADD CONSTRAINT orders_positive_amounts CHECK (
      (base_price IS NULL OR base_price > 0) AND
      (total_amount IS NULL OR total_amount > 0) AND
      (installation_fee IS NULL OR installation_fee >= 0) AND
      (promotional_price IS NULL OR promotional_price > 0)
    );
  END IF;
END $$;

-- Create indexes for payment-related lookups
CREATE INDEX IF NOT EXISTS idx_orders_payment_status ON public.orders(payment_status);
CREATE INDEX IF NOT EXISTS idx_orders_order_status ON public.orders(order_status);
CREATE INDEX IF NOT EXISTS idx_orders_payment_reference ON public.orders(payment_reference);
CREATE INDEX IF NOT EXISTS idx_orders_netcash_transaction_id ON public.orders(netcash_transaction_id);
CREATE INDEX IF NOT EXISTS idx_orders_customer_email ON public.orders(customer_email);
CREATE INDEX IF NOT EXISTS idx_orders_crm_synced ON public.orders(crm_synced) WHERE crm_synced = FALSE;

-- Add comments for new columns
COMMENT ON COLUMN public.orders.payment_status IS 'Current payment status: pending, processing, completed, failed, refunded, cancelled';
COMMENT ON COLUMN public.orders.order_status IS 'Order processing status: pending_payment, payment_received, crm_processing, confirmed, cancelled, failed';
COMMENT ON COLUMN public.orders.payment_reference IS 'Unique payment reference for tracking (generated by app)';
COMMENT ON COLUMN public.orders.netcash_transaction_id IS 'Netcash transaction ID from payment gateway';
COMMENT ON COLUMN public.orders.crm_synced IS 'Whether order has been synced to CRM (Zoho)';
COMMENT ON COLUMN public.orders.crm_lead_id IS 'Lead ID in the CRM system after sync';

-- Create payment audit log table
CREATE TABLE IF NOT EXISTS public.payment_audit_logs (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  order_id UUID NOT NULL REFERENCES public.orders(id) ON DELETE CASCADE,

  -- Event Details
  event_type VARCHAR(50) NOT NULL,
  status VARCHAR(50) NOT NULL,

  -- Webhook Data
  netcash_response JSONB,
  request_headers JSONB,
  request_body TEXT,

  -- Verification
  signature_valid BOOLEAN,
  ip_address VARCHAR(45),

  -- Metadata
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),

  CONSTRAINT payment_audit_valid_event_type CHECK (
    event_type IN ('payment_initiated', 'payment_callback', 'payment_verified', 'payment_failed', 'webhook_received')
  )
);

-- Indexes for audit logs
CREATE INDEX IF NOT EXISTS idx_payment_audit_order_id ON public.payment_audit_logs(order_id);
CREATE INDEX IF NOT EXISTS idx_payment_audit_created_at ON public.payment_audit_logs(created_at DESC);
CREATE INDEX IF NOT EXISTS idx_payment_audit_event_type ON public.payment_audit_logs(event_type);

-- Enable RLS for audit logs
ALTER TABLE public.payment_audit_logs ENABLE ROW LEVEL SECURITY;

-- RLS Policy: Service role only for audit logs
DROP POLICY IF EXISTS "Service role has full access to payment audit logs" ON public.payment_audit_logs;
CREATE POLICY "Service role has full access to payment audit logs"
  ON public.payment_audit_logs
  FOR ALL
  TO service_role
  USING (true)
  WITH CHECK (true);

-- Comment on audit logs table
COMMENT ON TABLE public.payment_audit_logs IS 'Audit trail for all payment-related events and webhook callbacks';

-- Grant permissions for audit logs
GRANT INSERT ON public.payment_audit_logs TO anon;
GRANT INSERT ON public.payment_audit_logs TO authenticated;
GRANT ALL ON public.payment_audit_logs TO service_role;

-- Update RLS policies for orders table to support anonymous checkout
DO $$
BEGIN
  -- Drop existing policy if it exists
  DROP POLICY IF EXISTS "Allow order updates for payment processing" ON public.orders;

  -- Create policy for anonymous order creation
  IF NOT EXISTS (
    SELECT 1 FROM pg_policies
    WHERE tablename = 'orders'
    AND policyname = 'Allow order creation for checkout'
  ) THEN
    CREATE POLICY "Allow order creation for checkout"
      ON public.orders
      FOR INSERT
      TO anon
      WITH CHECK (true);
  END IF;

  -- Create policy for authenticated users to read their own orders
  IF NOT EXISTS (
    SELECT 1 FROM pg_policies
    WHERE tablename = 'orders'
    AND policyname = 'Users can read their own orders'
  ) THEN
    CREATE POLICY "Users can read their own orders"
      ON public.orders
      FOR SELECT
      TO authenticated
      USING (customer_email = auth.jwt() ->> 'email');
  END IF;
END $$;
